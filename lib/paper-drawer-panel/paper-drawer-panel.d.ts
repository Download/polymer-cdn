/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   paper-drawer-panel.html
 */

/// <reference path="../polymer/types/polymer.d.ts" />
/// <reference path="../iron-media-query/iron-media-query.d.ts" />
/// <reference path="../iron-selector/iron-selector.d.ts" />
/// <reference path="../iron-resizable-behavior/iron-resizable-behavior.d.ts" />

/**
 * *This element has been deprecated in favor of [app-layout](https://github.com/PolymerElements/app-layout).**
 *
 * Material design: [Navigation drawer](https://www.google.com/design/spec/patterns/navigation-drawer.html)
 *
 * `paper-drawer-panel` contains a drawer panel and a main panel. The drawer
 * and the main panel are side-by-side with drawer on the left. When the browser
 * window size is smaller than the `responsiveWidth`, `paper-drawer-panel`
 * changes to narrow layout. In narrow layout, the drawer will be stacked on top
 * of the main panel. The drawer will slide in/out to hide/reveal the main
 * panel.
 *
 * Use the attribute `drawer` to indicate that the element is the drawer panel and
 * `main` to indicate that the element is the main panel.
 *
 * Example:
 *
 *     <paper-drawer-panel>
 *       <div slot="drawer"> Drawer panel... </div>
 *       <div slot="main"> Main panel... </div>
 *     </paper-drawer-panel>
 *
 * The drawer and the main panels are not scrollable. You can set CSS overflow
 * property on the elements to make them scrollable or use `paper-header-panel`.
 *
 * Example:
 *
 *     <paper-drawer-panel>
 *       <paper-header-panel slot="drawer">
 *         <paper-toolbar></paper-toolbar>
 *         <div> Drawer content... </div>
 *       </paper-header-panel>
 *       <paper-header-panel slot="main">
 *         <paper-toolbar></paper-toolbar>
 *         <div> Main content... </div>
 *       </paper-header-panel>
 *     </paper-drawer-panel>
 *
 * To position the drawer to the right, add `right-drawer` attribute.
 *
 *     <paper-drawer-panel right-drawer>
 *       <div slot="drawer"> Drawer panel... </div>
 *       <div slot="main"> Main panel... </div>
 *     </paper-drawer-panel>
 *
 * ### Styling
 *
 * To change the main container:
 *
 *     paper-drawer-panel {
 *       --paper-drawer-panel-main-container: {
 *         background-color: gray;
 *       };
 *     }
 *
 * To change the drawer container when it's in the left side:
 *
 *     paper-drawer-panel {
 *       --paper-drawer-panel-left-drawer-container: {
 *         background-color: white;
 *       };
 *     }
 *
 * To change the drawer container when it's in the right side:
 *
 *     paper-drawer-panel {
 *       --paper-drawer-panel-right-drawer-container: {
 *         background-color: white;
 *       };
 *     }
 *
 * To customize the scrim:
 *
 *     paper-drawer-panel {
 *       --paper-drawer-panel-scrim: {
 *         background-color: red;
 *       };
 *     }
 *
 * The following custom properties and mixins are available for styling:
 *
 * Custom property | Description | Default
 * ----------------|-------------|----------
 * `--paper-drawer-panel-scrim-opacity` | Scrim opacity | 1
 * `--paper-drawer-panel-drawer-container` | Mixin applied to drawer container | {}
 * `--paper-drawer-panel-left-drawer-container` | Mixin applied to container when it's in the left side | {}
 * `--paper-drawer-panel-main-container` | Mixin applied to main container | {}
 * `--paper-drawer-panel-right-drawer-container` | Mixin applied to container when it's in the right side | {}
 * `--paper-drawer-panel-scrim` | Mixin applied to scrim | {}
 */
interface PaperDrawerPanelElement extends Polymer.Element, Polymer.IronResizableBehavior {

  /**
   * The panel to be selected when `paper-drawer-panel` changes to narrow
   * layout.
   */
  defaultSelected: string|null|undefined;

  /**
   * If true, swipe from the edge is disabled.
   */
  disableEdgeSwipe: boolean|null|undefined;

  /**
   * If true, swipe to open/close the drawer is disabled.
   */
  disableSwipe: boolean|null|undefined;

  /**
   * Whether the user is dragging the drawer interactively.
   */
  readonly dragging: boolean|null|undefined;

  /**
   * Width of the drawer panel.
   */
  drawerWidth: string|null|undefined;

  /**
   * How many pixels on the side of the screen are sensitive to edge
   * swipes and peek.
   */
  edgeSwipeSensitivity: number|null|undefined;

  /**
   * If true, ignore `responsiveWidth` setting and force the narrow layout.
   */
  forceNarrow: boolean|null|undefined;

  /**
   * Whether the browser has support for the transform CSS property.
   */
  hasTransform: boolean|null|undefined;

  /**
   * Whether the browser has support for the will-change CSS property.
   */
  hasWillChange: boolean|null|undefined;

  /**
   * Returns true if the panel is in narrow layout.  This is useful if you
   * need to show/hide elements based on the layout.
   */
  readonly narrow: boolean|null|undefined;

  /**
   * Whether the drawer is peeking out from the edge.
   */
  readonly peeking: boolean|null|undefined;

  /**
   * Max-width when the panel changes to narrow layout.
   */
  responsiveWidth: string|null|undefined;

  /**
   * If true, position the drawer to the right.
   */
  rightDrawer: boolean|null|undefined;

  /**
   * The panel that is being selected. `drawer` for the drawer panel and
   * `main` for the main panel.
   */
  selected: string|null;

  /**
   * The CSS selector for the element that should receive focus when the
   * drawer is open. By default, when the drawer opens, it focuses the first
   * tabbable element. That is, the first element that can receive focus.
   *
   * To disable this behavior, you can set `drawerFocusSelector` to `null` or
   * an empty string.
   */
  drawerFocusSelector: string|null|undefined;

  /**
   * Whether the transition is enabled.
   */
  _transition: boolean|null|undefined;
  ready(): void;

  /**
   * Toggles the panel open and closed.
   */
  togglePanel(): void;

  /**
   * Opens the drawer.
   */
  openDrawer(): void;

  /**
   * Closes the drawer.
   */
  closeDrawer(): void;
  _onTransitionEnd(e: any): void;
  _computeIronSelectorClass(narrow: any, transition: any, dragging: any, rightDrawer: any, peeking: any): any;
  _setDrawerStyle(drawerWidth: any): void;
  _setMainStyle(narrow: any, rightDrawer: any, drawerWidth: any): void;
  _computeMediaQuery(forceNarrow: any, responsiveWidth: any): any;
  _computeSwipeOverlayHidden(narrow: any, disableEdgeSwipe: any): any;
  _onTrack(event: any): void;
  _responsiveChange(narrow: any): void;
  _onQueryMatchesChanged(event: any): void;
  _forceNarrowChanged(): void;
  _swipeAllowed(): any;
  _isMainSelected(): any;
  _startEdgePeek(): void;
  _stopEdgePeek(): void;
  _downHandler(event: any): void;
  _upHandler(): void;
  _onTap(event: any): void;
  _isEdgeTouch(event: any): any;
  _trackStart(event: any): void;
  _translateXForDeltaX(deltaX: any): any;
  _trackX(event: any): void;
  _trackEnd(event: any): void;
  _transformForTranslateX(translateX: any): any;
  _moveDrawer(translateX: any): void;
  _getDrawerSlot(): any;
  _getAutoFocusedNode(): any;
  _toggleFocusListener(selected: any): void;
  _didFocus(event: any): void;
  _isDrawerClosed(narrow: any, selected: any): any;
}

interface HTMLElementTagNameMap {
  "paper-drawer-panel": PaperDrawerPanelElement;
}
